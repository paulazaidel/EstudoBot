import logging
import os

from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

from const import CHAT_TOKEN
from geminia import GeminiIa

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üí° Ol√°! Sabia que responder perguntas sobre o que voc√™ estudou √© uma √≥tima maneira de memorizar melhor o conte√∫do? üß† Ao buscar as respostas, voc√™ refor√ßa as conex√µes neurais e consolida o aprendizado.",
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üìö Quer testar seus conhecimentos e turbinar sua memoriza√ß√£o? Me envie um arquivo PDF com o conte√∫do que voc√™ est√° estudando e eu gero 10 perguntas e respostas para voc√™! üòâ",
    )


async def handle_document_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recebe o arquivo PDF do usu√°rio."""

    # Obt√©m o documento
    document = update.message.document

    # Cria a pasta 'files' se ela n√£o existir
    if not os.path.exists("files"):
        os.makedirs("files")

    # Obt√©m o nome do arquivo
    filename = document.file_name

    # Obt√©m o arquivo do Telegram
    file = await document.get_file()

    # Baixa o arquivo e salva na pasta 'files'
    await file.download_to_drive(f"files/{filename}")

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"‚úÖ Gerando suas perguntas...",
    )

    # Gera as perguntas usando IA
    response = GeminiIa().execute(filename)

    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=response, parse_mode="Markdown"
    )


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚ùå Desculpe, s√≥ posso processar arquivos PDF.",
    )


if __name__ == "__main__":
    application = ApplicationBuilder().token(CHAT_TOKEN).build()

    start_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, start)
    document_pdf_handler = MessageHandler(filters.Document.PDF, handle_document_pdf)
    document_handler = MessageHandler(~filters.Document.PDF, handle_document)

    application.add_handler(start_handler)
    application.add_handler(document_pdf_handler)
    application.add_handler(document_handler)

    application.run_polling()
